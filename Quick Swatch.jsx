/*A few shouts out for getting this far.Zack Lovatt for the resize and autoLayout code.Tomas Sinkunas for answering my prayers on Adobe Forums.Jeff of the After Effects crew for SwatchYouWant that started all of this (I just wanted to be able to click on buttons Jeff).Then everyone else who helped me learn script building in 2014 onwards after my manager refused to pay £20 for a script. £20 Dave...*/function swatchReader(thisObj) {    var win = (thisObj instanceof Panel) ? thisObj : new Window('palette', "Quick Swatch", undefined, {resizeable: true});//few bits of info for later use.var buttonSize = [30,20, 5];    var btnArr = new Array();//Top Menu Buttonsvar topMenu = win.add("group");topMenu.alignment = ['left','top'];var search = topMenu.add('edittext',[0,0,100,32],"");var rgBorCmyk = topMenu.add("dropDownList",[0,0,100,32], ["RGB", "CMYK"]);rgBorCmyk.selection = 0;//IF SOME CAN GET THIS TOO WORK PLEASE.//var loadASE = topMenu.add("group");//var btn1 = loadASE.add("button",[0,0,100,32],"LOAD SWATCH");//Open aseFilevar aseFile = File.openDialog('Select *.ase file'); var data = app.parseSwatchFile(aseFile);var numColors = data.values.length;//Change the text box, update panel and search based on inputsearch.onChanging = function () {cleanUpGroup(grpContainer);parseColor();       updatePanel(win);    apply();};//RGB or CMYK. You choose, but it always selects RGB firstrgBorCmyk.onChange = function () {cleanUpGroup(grpContainer);parseColor();       updatePanel(win);    apply();};//This builds all the buttons...Is someone can make it neater....PLEASE PLEASE HELP. Don't hurl abuse that my coding is horrible. I learnt that if it works it. I've never learnt how to properly code.function parseColor(){var dataField = new Array();                        for (var i=0; i<numColors; i++){                var colorData = data.values[i];                    if((colorData.type == "RGB") && (rgBorCmyk.selection.text == "RGB")){                        if(colorData.name.indexOf(search.text) > -1){                        color = [colorData.r, colorData.g, colorData.b, 1];                        colorR = colorData.r;                        colorG = colorData.g;                        colorB = colorData.b;                        dataField[dataField.length] = new Array(color,colorData.name,colorR,colorG,colorB);                    }                  }                    if((colorData.type == "CMYK") && (rgBorCmyk.selection.text == "CMYK")){                        if(colorData.name.indexOf(search.text) > -1){                        var invBlack = 1 - colorData.k;                        color = [(1 - colorData.c)*invBlack, (1 - colorData.m)*invBlack, (1 - colorData.y)*invBlack, 1];                        colorR = (1 - colorData.c)*invBlack;                        colorG = (1 - colorData.m)*invBlack;                        colorB = (1 - colorData.y)*invBlack;                        dataField[dataField.length] = new Array(color,colorData.name,colorR,colorG,colorB);                    }                  }                }            for(var i = 0; i < dataField.length; i++){                btnArr[i] = grpContainer.add('iconbutton', undefined, undefined, {style: 'toolbutton'});                btnArr[i].size = [buttonSize[0],buttonSize[1]];                btnArr[i].fillBrush = btnArr[i].graphics.newBrush(btnArr[i].graphics.BrushType.SOLID_COLOR,dataField[i][0]);                btnArr[i].onDraw = customDraw;                     function customDraw()                    { with( this ) {                        graphics.drawOSControl();                        graphics.rectPath(0,0,size[0],size[1]);                        graphics.fillPath(fillBrush);                        if( text ) graphics.drawString(text,textPen,(size[0]-graphics.measureString (text,graphics.font,size[0])[0])/2,3,graphics.font);                        }                    }            }                    for(var i = 0; i < dataField.length; i++ ){                  btnArr[i].onClick =                  (function(i){                      return function() {                      app.beginUndoGroup("AddEffect");                      var curItem = app.project.activeItem;                      var selectedLayers = curItem.selectedLayers;                    //alert(dataField[i][1]);                    var str = [dataField[i][2],dataField[i][3],dataField[i][4]];            for (var j = 0; j < selectedLayers.length; j++) {                            if(selectedLayers[j].property("Source Text") != null){                  textProp = selectedLayers[j].property("Source Text");var textDocument = textProp.value;textDocument.fillColor = str;textDocument.applyFill = true;textProp.setValue(textDocument);                  }              else if(selectedLayers[j].property("Contents") != null){            selectedLayers[j].property("Contents").property(1).property("Contents").property(3).property("Color").setValue(dataField[i][0]);            } else {                            try {            curRem = selectedLayers[j].effect.property("Fill").remove();            curLayer = selectedLayers[j].Effects.addProperty("ADBE Fill")("Color").setValue(dataField[i][0]);            }            catch (err) {            curLayer = selectedLayers[j].Effects.addProperty("ADBE Fill")("Color").setValue(dataField[i][0]);            }           }    }            app.endUndoGroup();          }    })(i);           }}                    //This is the panel where my buttons get added      win.mainGrp = win.add("group")      var grpContainer = win.mainGrp;        //Unsure ask Zack Lovatt    win.size = [buttonSize[0]*win.mainGrp.children.length + (buttonSize[2] * (win.mainGrp.children.length-1)) + 2*buttonSize[2], buttonSize[1] + 2*buttonSize[2]];    //This adjustbuttons when resizing    win.onResize = win.onResizing = function () {        if (win.size.width < buttonSize[0]+2*buttonSize[2]) win.size.width = buttonSize[0]+2*buttonSize[2];        if (win.size.height < buttonSize[1]+2*buttonSize[2]) win.size.height = buttonSize[1]+2*buttonSize[2];        adjustButtons(win, win.mainGrp.children, buttonSize);    };//when your buttons first appear, it does the above. Otherwise they appear in a line until you resize the panel. function apply(){       if (win.size.width < buttonSize[0]+2*buttonSize[2]) win.size.width = buttonSize[0]+2*buttonSize[2];       if (win.size.height < buttonSize[1]+2*buttonSize[2]) win.size.height = buttonSize[1]+2*buttonSize[2];        adjustButtons(win, win.mainGrp.children, buttonSize);       }//Cleans up the mainGrp container. Then again you can use this for all panels. You just need to reference where cleanUpGroup("put your group here")   function cleanUpGroup(container) {        while (container.children[0]) {            container.remove(container.children[0]);        }    }//Does as it says. Updates the panel.    function updatePanel(win) {        win.layout.layout(true);    }//Something    if (win instanceof Window) {        win.show();        adjustButtons(win, win.mainGrp.children, buttonSize);    } else {        win.layout.layout(true);    }} // end function createPalette//function for adjusting buttonsfunction adjustButtons(win, buttonArray, buttonSize) {    var startPoint = [buttonSize[2], buttonSize[2]];    var offsetAmt = [buttonSize[0] + buttonSize[2], buttonSize[1] + buttonSize[2]];    win.mainGrp.bounds = [0,32 + buttonSize[2], win.windowBounds.width+startPoint[0], win.windowBounds.height+startPoint[1]];    for (var i = 0; i < buttonArray.length; i++){        buttonArray[i].location = [startPoint[0], startPoint[1]];        buttonArray[i].size = [buttonSize[0], buttonSize[1]];        startPoint[0] += offsetAmt[0];        if ((startPoint[0] + buttonSize[0]) > win.size[0]) {            startPoint[0] = buttonSize[2];            startPoint[1] += offsetAmt[1];        }    }} // end function adjustButtonsswatchReader(this);